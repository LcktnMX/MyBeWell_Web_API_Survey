// <auto-generated />
using System;
using Lockton.Surveys.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lockton.Surveys.DataAccess.Migrations
{
    [DbContext(typeof(WellnessContext))]
    partial class WellnessContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Contents")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ContentsEs")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contents_Es");

                    b.Property<Guid?>("IdQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Position")
                        .HasColumnType("float");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Aviso")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Terminos")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Contents")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ContentsEs")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contents_Es");

                    b.Property<string>("Footer")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Header")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<Guid?>("IdSection")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSurvey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Position")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdSection");

                    b.HasIndex("IdType");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Regex")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DescriptionEs")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Description_Es");

                    b.Property<Guid?>("IdSurvey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Position")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleEs")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title_Es");

                    b.HasKey("Id");

                    b.HasIndex("IdSurvey");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DescriptionEs")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Description_Es");

                    b.Property<Guid>("FingerPrint")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedUser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameEs")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name_Es");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("IdParticipant")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Progress")
                        .HasColumnType("float");

                    b.Property<bool?>("Sent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdParticipant");

                    b.ToTable("SurveyApplication");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IdSurvey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSurveyApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSurvey");

                    b.HasIndex("IdSurveyApplication");

                    b.ToTable("SurveyApplicationContents");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContentsAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IdAnswer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSurveyApplicationContents")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Position")
                        .HasColumnType("float");

                    b.Property<Guid?>("QuestionType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.HasIndex("IdSurveyApplicationContents");

                    b.ToTable("SurveyApplicationContentsAnswer");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContentsAnswerObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IdSurveyApplicationContentsAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdSurveyApplicationContentsAnswerId");

                    b.ToTable("SurveyApplicationContentsAnswerObservation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Answer", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Question", "IdQuestionNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdQuestion")
                        .HasConstraintName("FK_Answer_Question");

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Question", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Section", "IdSectionNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("IdSection")
                        .HasConstraintName("FK_Question_Section1");

                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.QuestionType", "IdTypeNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("IdType")
                        .HasConstraintName("FK_Question_QuestionType");

                    b.Navigation("IdSectionNavigation");

                    b.Navigation("IdTypeNavigation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Section", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Survey", "IdSurveyNavigation")
                        .WithMany("Sections")
                        .HasForeignKey("IdSurvey")
                        .HasConstraintName("FK_Section_Survey");

                    b.Navigation("IdSurveyNavigation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Survey", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Line", "Line")
                        .WithMany("Surveys")
                        .HasForeignKey("LineId")
                        .HasConstraintName("FK_Survey_Lines");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplication", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Participant", "IdParticipantNavigation")
                        .WithMany("SurveyApplications")
                        .HasForeignKey("IdParticipant")
                        .HasConstraintName("FK_SurveyApplication_Participant");

                    b.Navigation("IdParticipantNavigation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContent", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Survey", "IdSurveyNavigation")
                        .WithMany("SurveyApplicationContents")
                        .HasForeignKey("IdSurvey")
                        .HasConstraintName("FK_SurveyApplicationContents_Survey");

                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplication", "IdSurveyApplicationNavigation")
                        .WithMany("SurveyApplicationContents")
                        .HasForeignKey("IdSurveyApplication")
                        .HasConstraintName("FK_SurveyApplicationContents_SurveyApplication");

                    b.Navigation("IdSurveyApplicationNavigation");

                    b.Navigation("IdSurveyNavigation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContentsAnswer", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Answer", "IdAnswerNavigation")
                        .WithMany("SurveyApplicationContentsAnswers")
                        .HasForeignKey("IdAnswer")
                        .HasConstraintName("FK_SurveyApplicationContentsAnswer_Answer");

                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.Question", "IdQuestionNavigation")
                        .WithMany("SurveyApplicationContentsAnswers")
                        .HasForeignKey("IdQuestion")
                        .HasConstraintName("FK_SurveyApplicationContentsAnswer_Question");

                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContent", "IdSurveyApplicationContentsNavigation")
                        .WithMany("SurveyApplicationContentsAnswers")
                        .HasForeignKey("IdSurveyApplicationContents")
                        .HasConstraintName("FK_SurveyApplicationContentsAnswer_SurveyApplicationContents");

                    b.Navigation("IdAnswerNavigation");

                    b.Navigation("IdQuestionNavigation");

                    b.Navigation("IdSurveyApplicationContentsNavigation");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContentsAnswerObservation", b =>
                {
                    b.HasOne("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContentsAnswer", "IdSurveyApplicationContentsAnswer")
                        .WithMany("SurveyApplicationContentsAnswerObservations")
                        .HasForeignKey("IdSurveyApplicationContentsAnswerId")
                        .HasConstraintName("FK_SurveyApplicationContentsAnswerObservation_SurveyApplicationContentsAnswer");

                    b.Navigation("IdSurveyApplicationContentsAnswer");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Answer", b =>
                {
                    b.Navigation("SurveyApplicationContentsAnswers");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Line", b =>
                {
                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Participant", b =>
                {
                    b.Navigation("SurveyApplications");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("SurveyApplicationContentsAnswers");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.Survey", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("SurveyApplicationContents");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplication", b =>
                {
                    b.Navigation("SurveyApplicationContents");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContent", b =>
                {
                    b.Navigation("SurveyApplicationContentsAnswers");
                });

            modelBuilder.Entity("Lockton.Surveys.DataAccess.DBModels.Entities.SurveyApplicationContentsAnswer", b =>
                {
                    b.Navigation("SurveyApplicationContentsAnswerObservations");
                });
#pragma warning restore 612, 618
        }
    }
}
